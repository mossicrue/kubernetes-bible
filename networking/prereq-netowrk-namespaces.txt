### NETWORK PREREQUESITES - NETWORK NAMESPACES ###

# Network namespaces are used by containers like Docker to implement network isolation.
# Let's start from a simple host
# Containers are separated from the underlying host using namespaces


## What is a namespace?
# If your host was your house then namespaces are the rooms that you assign to each of your children
- Room helps providing privacy to each child
- Each child can only see what's within his room
- They cannot see what happens outside their room as far as they are concerned they are the only person living in the house

# As a parents you have the visibility of all the rooms in the house as well also other area of the house
# If you wish you can establish connectivity between two rooms in the house


## PROCESS NAMESPACE
# When you create a container you want to make sure that it is isolated and it doesn't see any other process on the host or any other containers
# We create a special room for it on our host using a namespace
# As far the container is concerned it only sees the processes run by it and thinks that is on its own host
# The underlying hosts however has visibility into all the prcesses including thoose running inside the containers
# This can be seen when you list the processes from the container

# When you run ps aux on a nginx container you will see a single process with PID 1
ps aux
USER    PID    START    TIME    COMMAND
root      1    03.06    0:00    nginx

# While when you rin it on the hosts you will see all the other processes along with the process running inside the container, this time with a different process ID
ps aux | grep nginx
USER    PID    START    TIME    COMMAND
root    3816   03.06    0:00    nginx

# That's how namespaces works

## NETWORK NAMESPACES
# When it comes to networking our host has its own interfaces that connect to the local area network 192.168.1.0
# Our host has its own routing and ARP tables with information about rest of the network

# We want to seal all of those details from the container
# When the container is created, we create a network namespace for it
# That way it has no visibility to any network related information on the host
# Within its namespace the container can have its own virtual interfaces, routing and ARP tables

# To create a network namespace on a linux host run the ip netns add command
ip netns add red
ip netns add blue

# In this case we have created 2 network namespaces: red and blue
# To list the network namespaces run the ip netns command
ip netns
red
blue

# list host interfaces
ip link
# output will show 2 network intefaces: loopback and eth0

# list host interfaces in a network spaces
ip netns exec red ip link
ip -n red link

# ARP Tables works like interfaces, if you run the arp command on the host you see a list of entries
arp

# If you run it inside the container you will se no entries
ip netns exec red arp

# The same is for routing table commands
route
ip netns exec route


## HANDLE 2 NETWORK NAMESPACES
# As for now this network named spaces have no network connectivity
# They have no interfaces of their own and they cannot see the underlying hosts network
# Let's first look at establishing connectivity between the namespaces themselves
# To connect 2 network namespaces you can use a virtual ehternet pair or a virtual cable
# Virtual cable is it often referred as pipe

# create a virtual cable
ip link add veth-red type veth peer name veth-blue

# attach a virtual interfaces to a network namespace
ip link set veth-red netns red
ip link set veth-blue netns blue

# assign IP to a virtual eth on a namespace
ip -n red addr add 192.168.15.1 dev veth-red
ip -n blue addr add 192.168.15.2 dev veth-blue

# bring up the link
ip -n red link set veth-red up
ip -n blue link set veth-blue up

# try ping from a namespace to other
ip netns exec red ping 192.168.15.2

# arp table now identifies neighbor at 192.168.15.2
ip netns exec red arp

# same for blue arp table, but neighbor is 192.168.15.1
ip netns exec blue arp

# arp from the hosts will not show the previous entry


## HANDLE 3 OR MORE NETWORK NAMESPACES
# This is how works when you have 2 namespaces, how do you enable all of them to communicate with each other?
# Just like in the physical world you create a virtual network inside your host
# To create a network you need a virtual switch in the host and connect the namespaces to it

# How do you create a virtual switch in a host?
# There are multiple solutions available such as Linux Print and the OpenvSwitch
# We use Linux Bridge
# To create a bridge network we add a new interface using the ip link add command with type bridge
ip link add v-net-0 type bridge

# bring up the bridge
ip link set dev v-net-0 up

# bridge interfaces is an interface at host level but a switch at network namespace level
# Next step is to connect the namespace to this new virtual network switch
# Earlier we connected the 2 namespaces directly, now we will be connecting all named spaces to the bridge network
# Delete the virtual cable from red to blue network namespaces
ip -n red link del veth-red
# you don't need to delete link on the 2 namespaces, only on one it's enough

# Create a new virtual cable that link namespaces to the bridge
ip link add veth-red type veth peer name veth-red-br
ip link add veth-blue type veth peer bame veth-blue-br

# Attach the virtual cable to network namespaces
ip link set veth-red netns red
ip link set veth-blue netns blue

# Attach the other end to the bridge network
ip link set veth-red-br master v-net-0
ip link set veth-blue-br master v-net-0

# Set ip addresses for the namespace's interfaces
ip -n red addr add 192.168.15.1 dev veth-red
ip -n blue addr add 192.168.15.2 dev veth-blue

# bring the namespace's interfaces up
ip -n red link set veth-red up
ip -n blue link set veth-blue up


# For now, I can't ping from my host to the host in the namespaces
# How I can establish connectiv between my host and this namespaces?
# Assign an IP to the bridge by running
ip addr add 192.168.15.5/24 dev v-net-0

# You can now ping red namespaces from the hosts
# NOTE: The entire network build before is still private and restricted in the host
# From the namespaces you can't reach the outside world and anyone can access from the outside workd to the services or application running in the namespaces

# The only door to the outside is the ethernet port of the host
# How we configure the bridge to reach the lan network 192.168.1.0/24 through eth0 interfaces?
# Take for example another hosts with IP 192.168.1.3, how can we reach this host from my namespaces?

# What happen when I try to ping the host from the blue namespaces?
ip netns exec blue ping 192.168.1.3
# Blue namespace sees taht I'm trying to reach a network at 192.168.1.0/24 which is different from my current network 192.168.15.0/24

# So it looks at the routing table to see how to find that network
ip netns exec blue route
# Routing table has no information about other network so ti comes back says that the network is unreachable

# We need to add a route specifying how to reach the gateway to the outside world
# How to find this gateway?
# The solution is the local host where there are all the namespaces, because it has:
- one interface type bridge connected to the local network 192.168.15.0/24 that reach blue namespace
- one interface connected to the outside eth0

# Through the interfaces attached to the private network we can ping the namespaces
# The local host is the gateway that connects the two networks togheter
# We can now add a row entry in the blue namespace to say route all traffic to the 192.168.1.0/24
ip netns exec blue ip route add 192.168.1.0/24 via 192.168.15.5
# Gateway IP 192.168.15.5 is the bridge v-net-0 IP

# The local host has 2 IP Adresses
- 192.168.15.5 on the internal bridge network
- 192.168.1.2 on the external lan network

# Can I use any of them in the route?
# No, blue namespace can only reach the gateway in its local network at 192.168.15.5
# Default gateway should be reachable from your namespaces when you add it to your route
# Now ping from blue to the Host B to 192.168.1.3 will no longer return network unreachable message
ip netns exec blue ping 192.168.1.3
# But you still don't get any response back from the ping, what might be the problem?

## NAT
# Our whole network has our internal IP addresses that the destination netowrk don't know about, so they cannot reach back.
# Fot this problem we need NAT enabled on our host acting as a gateway here
# So that it can send the messages to the lan in its own name with its own address
# How to enable Nat on the local host? Using IP Tables
# Add a new rule in the Nat IP table in the postrouting chain to masquerade or replace the FROM Address on all packets coming from the source network 192.168.15.0 with its own IP address
iptables -t nat -A POSTROUTING -s 192.168.15.0/24 -j MASQUERADE

# With this anyone receiving these packets outside the network will think that they are coming from the hosts and not from internal in the namespace
# Now when we trying to ping from blue namespaces we get a response, so we can reach the outside world without problem

# Last point, say that the lan network 192.168.1.0 is conencted to the internet
# We want the namespaces to reach internet
# Ping from blue nanespace on Google will fails with network unreachable
ip netns exec blue ping 8.8.8.8
Connect: Network is unreachable

# This is because we add only a route to the internal network 192.168.1.0 but not to anything else
# We can add a route in which we say "to reach any external network talk to our host"
# We add a default gateway specifying our host
ip netns exec blue ip route add default via 192.168.15.5

# We can now reach the outside world from the namespaces



## FROM OUTSIDE TO NAMESPACES
# Example: Blue application hosts a web server on port 80
# We can't access the namespaces from outside the world, only from the host itself

# If you try to ping the private IP of the namespace from another host on another network you will see it's not reachable, because the pinging hosts doesn't know about this private network
# In order to make that communication possible you have two options:
# The first is togive away the identity of the private network to the second host
# We basically add an IP route entry to the second host telling the that the network 192.168.15.0 can be reached through the host at 192.168.1.2

# but we don't want to do that
# The other options is to add a port forwarding rule using IP tables to say any traffic coming to port 80 on the local host is to be forwarded to port 80 on the IP assigned to the blue namespaces
iptables -t nat -A PREROUTING --dport 80 --to-destination 192.168.15.2:80 -j DNAT
