### KUBECONFIG ###

# call api with curl and authenticate with certificate
curl https://my-kube-playground:6443/api/v1/pods --key admin.key --cert admin.crt --cacert ca.crt

# call api with kubectl and authenticate with certificate
kubectl get pods
    --server my-kube-playground:6443
    --client-key admin.key
    --client-certificate admin.crt
    --certificate-authority ca.crt

# Type the 4 options every time is tedious, move the data in a configuration file called KubeConfig.
# Specify then this file in the kubectl commands
kubectl get pods --kubeconfig <config-file>

# By default kubectl looks for a file named config under $HOME/.kube/config
# If you create the file in that path you don't have to specify any --kubeconfig options for kubectl commands

## How KubeConfig is format at high level
# KubeConfig file is in a specific format
# It has 3 sections: Clusters, Users, Contexts

## Clusters
# There are the various kubernetes cluster that you need to access to
# You can have multiple clusters for different environment like development, testing or production
# Or also for different organizations or on different cloud providers
# All those data go here

## Users
# Users are the user accounts with which you have to access to these clusters
# For example admin users, dev user, prod user etc
# These users may have different privileges on different clusters

## Contexts
# Marry users and clusters togheter, context define which user account will be used to access which cluster
# EG: a context named Admin@Production that will use the admin account to access a production cluster
# Creating a context doesn't create any new users or configuring any kind of user access or authorization in the cluster
# You are using existing users with their existing privileges and defining what user you are going to use to access to that cluster

## Related to the kubectl example at the start
# --server option goes into the Clusters section, entry "MyKubePlayground"
# --client-key, --client-certificate and --certificate-authority options goes to Users Sections, entry: "MyKubeAdmin"
# A context MyKubeAdmin@MyKubePlayground is created to grant MyKubeAdmin user to access MyKubePlayground cluster


## How a KubeConfig file is format with yaml
apiVersion: v1
kind: Config
clusters:
- name: my-kube-playground
  cluster:
    certificate-authority: ca.crt
    server: https://my-kube-playground
contenxts:
- name: my-kube-admin@my-kube-playground
  context:
    cluster: my-kube-playground
    user: my-kube-admin
users:
- name: my-kube-admin
  user:
    client-certificate: admin.crt
    client-key: admin.key

# Kubeconfig file does not to be created before use, is readed by the kubectl command every time

## How does kubectl know which context to chose from?
# example kubeconfig
apiVersion: v1
kind: Config
current-context: dev-user@google
clusters:
- name: my-kube-playground  (values hidden...)
- name: development
- name: google
- name: production
contenxts:
- name: my-kube-admin@my-kube-playground
- name: dev-user@google
- name: prod-user@production
users:
- name: my-kube-admin
- name: admin
- name: dev-user
- name: prod-user

# Specify the default context to use by adding the field "current-context" with the context you want
# In this case kubectl will always use the context dev-user@google to access the google cluster using the dev user's credientials


## Kubectl kubeconfig commands

# view kubeconfig file present in $HOME/.kube/config
kubectl config view

# view a custom kubeconfig file
kubectl config view --kubeconfig=my-custom-config

# change current context
kubectl config use-context prod-user@production

# you can also add or delete cluster, users and context with kubectl
kubectl config -h


## What about namespaces?
# Each cluster may be configured with multiple name spaces within it
# Context section in kubeconfig file can take additional field called namespace where it's specified a particular namespace
contexts:
- name: admin@production
  context:
    cluster: production
    user: admin
    namespace: finance

# When you switch to that context you will automatically be in a specific namespace


## Certificates credientials
# Always use full-path for specify certificates and keys
# We can also use raw certificates data by using "certificate-authority-data:" instead of "certificate-authority"
# The certificates must be encoded in base64 without new line
cat ca.crt | base64


clusters:
- name: production
  cluster:
### certificate-authority: /etc/kubernetes/pki/ca.crt
    certificate-authority-data: bG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXRlIGNvbnNlY3V0b3IgZSBwb2kgbm9uIG1lIGxvIHJpY29yZG8gcGnDuQo=
