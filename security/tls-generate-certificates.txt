### GENERATE TLS CERTIFICATES ###

# There are different tools to generate a tls certificates like:
- easyrsa
- openssl
- cfssl

## Generate Certificate authority certificate and key
# generate ca private  key
openssl genrsa -out ca.key 2048

# generate certificate singing request
openssl req -new -key ca.key -subj "/CN=KUBERNETES-CA" -out ca.csr

# sign certificate
openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt

# Since the certificate is for the ca itself, it is self-signed by the CA using its own private key generated in first step
# All the other certificates we will use this ca key pair to sign them


## Admin user certificate
openssl genrsa -out admin.key 2048

# generate the CSR for admin user
openssl req -new -key admin.key -subj "/CN=kube-admin/O=system:masters" -out admin.csr

# sign admin users certificate, with CA certificate
openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -out admin.crt

# Certificates CN doesn't really have to be "kube-admin", can be anything
# this is the name that kubectl client authenticates with when you run kubectl commands
# kube-admin would be the name you see in audit log or elsewhere


## Kube scheduler certificates
# As kube-scheduler is a system component part of the kubernetes control plane, so it's name must be prefixed with "system"
openssl req -new -key admin.key -subj "/CN=system:kube-scheduler" -out admin.csr
# Same to do also for kube-controller and kube-proxy

## How to use certificates to authenticate
- in curl call: curl https://kube-apiserver:6443/api/v1/pods --key admin.key --cert admin.crt --cacert ca.crt
- in kube-config.yaml in the users: sections for the api configuration



## SERVER SIDE CERTIFICATES

## ETCD Server certificate
# generate the etcd certificates using CN=etcd-server as for the other components and set the options in the etcd yaml definition file
--key-file=/path-to-certs/etcdserver.key
--cert-file=/path-to-certs/etcdserver.crt
--trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
# etcd can be deployed as a cluster across multiple servers, as in high availability environment
# to ensure secure communications between the etcd cluster member we must generate an additional peer certificates
- etcdpeer1.key
- etcdpeer1.crt
# specify the peer certificates in the etcd process by adding --peer options
--peer-cert-file=/peer-to-certs/etcdpeer1.crt
--peer-client-cert-auth=true
--peer-key-file=/etc/kubernetes/pki/etcd/peer.key
--peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt

## Kube-api server
# kube-api server is the most used component of kubernetes claster
# kube-api server IS Kubernetes
# Other like to call it kubernetes.default or kubernetes.default.svc or kubernetes.default.svc.cluster.local
# It's also referred, in some places, simply by its IP or the IP of the host running kube-api or the IP of the pods running it
# All this name must be present in the certificate generated for the kube-api server

# create kube-api server key
openssl genrsa -out apiserver.key 2048

# create an openssl.cnf file to specify the alternate name, putting them in the [alt_names] sections
# openssl.cnf example
[req]
req_extensions = v3_req
[v3_req]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation,
subjectAltName = @alt_names
[alt_names]
DNS.1 = kubernetes
DNS.2 = kubernetes.default
DNS.3 = kubernetes.default.svc
DNS.4 = kubernetes.default.svc.cluster.local
IP.1 = 10.96.0.1
IP.2 = 172.17.0.87

# generate the certificate sign request and pass the cnf as options
openssl req -new -key apiserver.key -subj "/CN=kube-apiserver" -out apiserver.csr -config openssl.cnf

# sign the certificates
openssl x509 -req -in apiserver.csr -CA ca.crt -CAkey ca.key -out apiserver.crt

## options in where pass kube-api server certificates
# in kube-api server services file
--client-ca-file=/var/lib/kubernetes/ca.pem
--tls-cert-file=/var/lib/kubernetes/apiserver.crt
--tls-private-key-file=/var/lib/kubernetes/apiserver.key

--etcd-cafile=/var/lib/kubernetes/ca.pem
--etcd-certfile=/var/lib/kubernetes/apiserver-etcd-client.crt
--etcd-keyfile=/var/lib/kubernetes/apiserver-etcd-client.key

--kubelet-certificate-authority=/var/lib/kubernetes/ca.pem
--kubelet-client-certificate=/var/lib/kubernetes/apiserver-etcd-client.crt
--kubelet-client-key=/var/lib/kubernetes/apiserver-etcd-client.key


## Kubelet nodes server certificates
# kubelet is an https server running on all the nodes that manage them
# api-server talks to kubelet to monitor the node
# a certificate is needed for every nodes on the cluster
# certificates are called following node name: node01, node02, node03

# once the certificates are created, use them in the kuebelet-config file
# examlple on kubelet-config.yaml on node01
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
authentication:
  x509:
    clientCAFile: "/var/lib/kubernetes/ca.pem"
authorization:
  mdoe: Webhook
clusterDomain: "cluster.local"
clusterDNS:
  - "10.32.0.10"
podCIDR: "${POD_CIDR}"
resolvConf: "/run/systemd/resolve/resolv.conf"
runtimeRequestTimeout: "15m"
tlsCertFile: "/var/lib/kubelet/node01.crt"
tlsPrivateKeyFile: "/var/lib/kubelet/node01.key"



## Kubelet nodes Client certificates
# Api server needs to know which node is authenticated and give it the right set of permissions
# It requires that nodes has setted the right name in the right format
# nodes are part of the kubernetes system, the names in certificates need this name format
system:node:<nodename> -> system:node:node01, system:node:node02, system:node:node03
# the nodes must be added in a group named system:nodes
# once certificate are generated they go in the kubelet configuration file
