### INIT CONTAINER ###

# In a multi-container pod, each container is expected to run a process that stays alive as long as the POD's lifecycle.
# For example in the multi-container pod that has a web application and logging agent, both the containers are expected to stay alive at all times.
# The process running in the log agent container is expected to stay alive as long as the web application is running.
# If any of them fails, the POD restarts.

# But at times you may want to run a process that runs to completion in a container.
# For example a process that pulls a code or binary from a repository that will be used by the main web application.
# That is a task that will be run only  one time when the pod is first created. Or a process that waits for an external service or database to be up before the actual application starts.
# That's where initContainers comes in.

## DECLARE AN INITCONTAINER IN A POD
# Add the initContainers section under spec macro-property, below an example
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox
    command: ['sh', '-c', 'git clone <some-repository-that-will-be-used-by-application> ; done;']

# When a POD is first created the initContainer is running. That process must run to a completion before the real container can starts
# You can configure multiple initContainers, like multi-pod containers.
# In that case each init container is run one at a time in sequential order.
# If any of the initContainers fail to complete, Kubernetes restarts the Pod repeatedly until the Init Container succeeds.
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox:1.28
    command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
  - name: init-mydb
    image: busybox:1.28
    command: ['sh', '-c', 'until nslookup mydb; do echo waiting for mydb; sleep 2; done;']


# Running kubectl get pods help to understand state of the initCointener process status
# Under the STATUS column, you can find Init:<completed-init-container>/<total-init-container>
kubectl get pods
NAME    READY   STATUS              RESTARTS   AGE
blue    0/1     Init:0/1            0          7s
purple   0/1    Init:0/2            0          8s
