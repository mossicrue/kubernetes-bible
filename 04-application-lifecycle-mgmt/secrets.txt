### SECRETS ###

# Similar to configmap but encoded or in hashed format
# Like with configmaps with have to create a secrets before injecting it in a pod

# Create a secrets imperatively
kubectl create secret generic <secret-name> --from-literal=<key>=<value>
kubectl create secret generic app-secret --from-literal=DB_HOST=mysql

# Create a secrets imperatively from file
kubectl create secret generic <secret-name> --from-file=<path-to-file>
kubectl create secret generic app-secret --from-file=app_secret.properties

# --from-file options file has to be filled with environment data in the same way we do for data property in definition yaml

# Create a secrets declaratively
kubectl create -f secretes-definition.yaml

# Example of secretes-definition.yaml
apiVersion: v1
kind: Secrets
metadata:
  name: app-secret
data:
  DB_Host: bXlzcWw=
  DB_User: cm9vdA==
  DB_Password: cGFzc3dvcmQ=

# Encode a value
echo -n "<value-to-encode>" | base64

# Decode a value
echo -n "<encoded-value>" | base64 --decode


# RETRIEVING INFO COMMANDS

# get all secretes
kubectl get secrets

# get info from a secrets
kubectl describe secrets <secret-name>

# get encoded values of a specific secret
kubectl get secrets <secret-name> -o yaml


## INJECT A SECRETS IN A POD
# Inject all env on a container
spec:
  containers:
    - name: simple-webapp-color
      image: simple-webapp-color
      envFrom:
        - secretRef:
            name: app-secret

# Inject only a key
      env:
        - name: DB_Password
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: DB_Password

# Inject environment data as a file in a volume
      volumes:
        - name: app-secret-volume
          secret:
            secretName: app-secret
